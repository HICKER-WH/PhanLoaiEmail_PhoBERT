from typing import Dict
class EmailAnalysisSystem:
    def __init__(self, spam_model_path: str = None):
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

        # Initialize PhoBERT classifier
        self.tokenizer = AutoTokenizer.from_pretrained("vinai/phobert-base")
        self.spam_classifier = EmailClassifier(2)  # 2 classes: spam/not spam
        if spam_model_path:
            self.spam_classifier.load_state_dict(torch.load(spam_model_path))
        self.spam_classifier = self.spam_classifier.to(self.device)

        # Initialize importance evaluator
        self.importance_evaluator = ImportanceEvaluator()

    def analyze_email(self, email_content: str) -> Dict:
        # First, check if it's spam
        is_spam = self._check_spam(email_content)

        if is_spam:
            return {
                "is_spam": True,
                "importance_analysis": None,
                "recommendation": "This email has been classified as spam and should be ignored."
            }

        # If not spam, evaluate importance
        importance_analysis = self.importance_evaluator.evaluate_importance(email_content)

        return {
            "is_spam": False,
            "importance_analysis": importance_analysis,
            "recommendation": self._generate_recommendation(importance_analysis)
        }

    def _check_spam(self, email_content: str) -> bool:
        self.spam_classifier.eval()
        encoding = self.tokenizer.encode_plus(
            email_content,
            add_special_tokens=True,
            max_length=256,
            padding='max_length',
            truncation=True,
            return_attention_mask=True,
            return_tensors='pt'
        )

        with torch.no_grad():
            input_ids = encoding['input_ids'].to(self.device)
            attention_mask = encoding['attention_mask'].to(self.device)
            outputs = self.spam_classifier(input_ids=input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs, dim=1)

        return bool(preds.item())

    def _generate_recommendation(self, importance_analysis: Dict) -> str:
        # Generate recommendation based on importance analysis
        priority = importance_analysis.get('priority_level', 'Medium')
        urgency = importance_analysis.get('urgency', 3)
        required_action = importance_analysis.get('required_action', 'Unknown')

        if priority == 'High' and urgency >= 4:
            return "Immediate attention required. Handle this email as soon as possible."
        elif priority == 'Medium' or (urgency >= 3):
            return "Handle this email within normal business hours."
        else:
            return "Low priority. Handle when convenient."
from abacusai import ApiClient
import json

class ImportanceEvaluator:
    def __init__(self, api_key):
        self.client = ApiClient(api_key=api_key)
        # Kh·ªüi t·∫°o chat session v·ªõi GPT-4
        self.chat_session = self.client.create_chat_session(
            project_id="ad9544c9e",  # S·ª≠ d·ª•ng GPT-4
            # temperature=0.3,    # ƒê·ªô s√°ng t·∫°o th·∫•p ƒë·ªÉ c√≥ k·∫øt qu·∫£ nh·∫•t qu√°n
            # system_prompt="""B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n ƒë√°nh gi√° t·∫ßm quan tr·ªçng c·ªßa email.
            # Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch email v√† ƒë∆∞a ra ƒë√°nh gi√° chi ti·∫øt v·ªÅ m·ª©c ƒë·ªô kh·∫©n c·∫•p,
            # t√°c ƒë·ªông ƒë·∫øn c√¥ng vi·ªác, y√™u c·∫ßu h√†nh ƒë·ªông v√† m·ª©c ƒë·ªô ∆∞u ti√™n."""
        )

    def evaluate_importance(self, email_content):
        try:
            # X√¢y d·ª±ng prompt
            prompt = f"""H√£y ph√¢n t√≠ch email sau c√≥ n·ªôi dung t·ªë gi√°c, khi·∫øu n·∫°i kh√¥ng:

Email c·∫ßn ƒë√°nh gi√°:
---
{email_content}
---

Y√™u c·∫ßu: Ki·ªÉm tra email c√≥ n·ªôi dung t·ªë gi√°c hay khi·∫øu n·∫°i kh√¥ng, n·∫øu kh√¥ng ph·∫£i tr·∫£ v·ªÅ k·∫øt qu·∫£ l√† ch·ªØ 'scam' n·∫øu c√≥ Ph√¢n t√≠ch v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ theo 2 n·ªôi dung sau:
- ƒê·ªô ∆∞u ti√™n: M·ª©c ƒë·ªô ∆∞u ti√™n (Th·∫•p/Trung b√¨nh/Cao)
- ph√¢n t√≠ch: ph√¢n t√≠ch ng·∫Øn g·ªçn v·ªÅ n·ªôi dung

"""

            # G·ªçi Chat API v·ªõi GPT-4
            # response = self.client.get_chat_response(
            #     chat_session_id=self.chat_session.chat_session_id,
            #     prompt=prompt
            # )
            response = self.client.evaluate_prompt(prompt = prompt, system_message = "B·∫°n ph·∫£i tr·∫£ l·ªùi m·ªôt c√°ch ch√≠nh x√°c.", llm_name = "OPENAI_GPT4O")
            print(response.content)
            return response.content

        #     # Parse k·∫øt qu·∫£
        #     if hasattr(response, 'response'):
        #         try:
        #             # T√¨m v√† tr√≠ch xu·∫•t ph·∫ßn JSON t·ª´ response
        #             json_str = self._extract_json(response.response)
        #             result = json.loads(json_str)
        #             return self._validate_result(result)
        #         except json.JSONDecodeError as e:
        #             print(f"L·ªói parse JSON: {e}")
        #             return self._default_importance()
        #     else:
        #         return self._default_importance()

        except Exception as e:
            print(f"L·ªói khi g·ªçi Chat API: {e}")
            return "L·ªói"


    def _extract_json(self, text):
        """Tr√≠ch xu·∫•t ph·∫ßn JSON t·ª´ response text"""
        try:
            # T√¨m d·∫•u { ƒë·∫ßu ti√™n v√† } cu·ªëi c√πng
            start = text.find('{')
            end = text.rfind('}') + 1
            if start != -1 and end != 0:
                return text[start:end]
            return "{}"
        except:
            return "{}"

    def _validate_result(self, result):
        """Ki·ªÉm tra v√† chu·∫©n h√≥a k·∫øt qu·∫£"""
        validated = {}

        # Ki·ªÉm tra v√† chu·∫©n h√≥a urgency
        urgency = result.get('urgency', 3)
        validated['urgency'] = max(1, min(5, int(urgency)))

        # Ki·ªÉm tra v√† chu·∫©n h√≥a business_impact
        impact = result.get('business_impact', 3)
        validated['business_impact'] = max(1, min(5, int(impact)))

        # Ki·ªÉm tra v√† chu·∫©n h√≥a required_action
        action = result.get('required_action', 'Kh√¥ng x√°c ƒë·ªãnh')
        validated['required_action'] = 'C√≥' if str(action).lower() in ['c√≥', 'yes', 'true'] else 'Kh√¥ng'

        # Ki·ªÉm tra v√† chu·∫©n h√≥a priority_level
        priority = str(result.get('priority_level', 'Trung b√¨nh')).lower()
        if priority in ['cao', 'high']:
            validated['priority_level'] = 'Cao'
        elif priority in ['th·∫•p', 'low']:
            validated['priority_level'] = 'Th·∫•p'
        else:
            validated['priority_level'] = 'Trung b√¨nh'

        # Th√™m ph·∫ßn analysis n·∫øu c√≥
        validated['analysis'] = result.get('analysis', 'Kh√¥ng c√≥ ph√¢n t√≠ch')

        return validated

    def _default_importance(self):
        """Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh khi c√≥ l·ªói"""
        return {
            'urgency': 3,
            'business_impact': 3,
            'required_action': 'Kh√¥ng x√°c ƒë·ªãnh',
            'priority_level': 'Trung b√¨nh',
            'analysis': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch do l·ªói h·ªá th·ªëng'
        }

import streamlit as st
import pandas as pd

import time

# Kh·ªüi t·∫°o ImportanceEvaluator
@st.cache_resource
def get_evaluator():
    abacus_api_key = "s2_04004a405eb64d2490339f1ecbe9866a"
    return ImportanceEvaluator(abacus_api_key)

def main():
    st.set_page_config(page_title="Email Analysis", layout="wide")

    # Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
    st.title("üîç H·ªá th·ªëng Ph√¢n t√≠ch Email")
    st.markdown("---")

    # Sidebar cho c·∫•u h√¨nh
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        batch_size = st.number_input("S·ªë email ph√¢n t√≠ch m·ªói l·∫ßn", 
                                   min_value=1, 
                                   max_value=100, 
                                   value=10)

    # Upload file
    uploaded_file = st.file_uploader("üì§ Upload file CSV ch·ª©a danh s√°ch email", 
                                   type=['csv'])

    if uploaded_file is not None:
        try:
            # ƒê·ªçc file CSV
            df = pd.read_csv(uploaded_file)

            # Hi·ªÉn th·ªã preview data
            st.subheader("üìã Preview d·ªØ li·ªáu")
            st.dataframe(df.head())

            # Ch·ªçn c·ªôt ch·ª©a n·ªôi dung email
            email_column = st.selectbox("Ch·ªçn c·ªôt ch·ª©a n·ªôi dung email", 
                                      df.columns)

            if st.button("üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch"):
                evaluator = get_evaluator()
                emails = df[email_column].tolist()

                # Container cho k·∫øt qu·∫£
                results_container = st.container()

                with results_container:
                    st.subheader("‚è≥ ƒêang ph√¢n t√≠ch...")
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    results = []

                    # Ph√¢n t√≠ch t·ª´ng email
                    for i, email in enumerate(emails):
                        try:
                            # Ph√¢n t√≠ch email
                            analysis = evaluator.evaluate_importance(email)

                            # Th√™m k·∫øt qu·∫£
                            results.append({
                                "N·ªôi dung": email,
                                "ƒê√°nh gi√°": analysis
                            })

                            # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                            progress = (i + 1) / len(emails)
                            progress_bar.progress(progress)
                            status_text.text(f"ƒê√£ ph√¢n t√≠ch {i+1}/{len(emails)} email")

                        except Exception as e:
                            st.error(f"L·ªói khi ph√¢n t√≠ch email {i+1}: {str(e)}")
                            continue

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    if results:
                        st.subheader("üìä K·∫øt qu·∫£ ph√¢n t√≠ch")
                        results_df = pd.DataFrame(results)

                        # T·∫°o b·∫£ng v·ªõi ƒë·ªãnh d·∫°ng
                        st.dataframe(
                            results_df,
                            column_config={
                                "N·ªôi dung": st.column_config.TextColumn(
                                    "N·ªôi dung Email",
                                    width="medium"
                                ),
                                "ƒê√°nh gi√°": st.column_config.TextColumn(
                                    "ƒê√°nh gi√°",
                                    width="small"
                                )
                            }
                        )

                        # T·∫°o n√∫t download
                        csv = results_df.to_csv(index=False)
                        st.download_button(
                            label="üì• T·∫£i k·∫øt qu·∫£ ph√¢n t√≠ch",
                            data=csv,
                            file_name="email_analysis_results.csv",
                            mime="text/csv"
                        )

                        # Hi·ªÉn th·ªã th·ªëng k√™
                        st.subheader("üìà Th·ªëng k√™")
                        col1, col2 = st.columns(2)

                        with col1:
                            st.metric("T·ªïng s·ªë email ƒë√£ ph√¢n t√≠ch", 
                                    len(results))

                        with col2:
                            important_count = sum(1 for r in results 
                                               if "quan tr·ªçng" in r["ƒê√°nh gi√°"].lower())
                            st.metric("S·ªë email quan tr·ªçng", 
                                    important_count)

        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file: {str(e)}")

if __name__ == "__main__":
    main()